This is a Driver for the class Graph
What do you want to do? Enter the key and press Enter
1-node management
2-edge management
3-Show the whole graph
4-exit

Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
enter the id of the nodes you want to add, it is assumed they're not currently part of the graph
when you're done, enter 0 and hit enter
node added successfully

node added successfully

node added successfully

node added successfully

node added successfully

node added successfully

node added successfully

node added successfully

node added successfully



Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
1-node management
2-edge management
3-Show the whole graph
4-exit

Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
create the edges, enter id's of the nodes adjacent (they have to be in the graph), and the weight of the edges
when you're done, hit 0
edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!



Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
The valid number of edges is 8


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
The total number of edges is 8


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
{2, 1, 30.0}
{3, 2, 15.0}
{5, 4, 20.0}
{4, 1, 20.0}
{7, 6, 10.0}
{9, 8, 20.0}
{9, 7, 15.0}
{7, 1, 20.0}


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
enter the id of the two nodes
the edge doesn't exist


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
enter the id of the two nodes
the edge exists


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
enter the id of the two nodes
the edge exists


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
enter the id of the node
The edges adjacent to the node 1 are:
{2, 1, 30.0}
{4, 1, 20.0}
{7, 1, 20.0}


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
1-node management
2-edge management
3-Show the whole graph
4-exit
Order: 9
Number of edges: 8

Nodes:
    [1, 2, 3, 4, 5, 6, 7, 8, 9]

Edges:
    [{2, 1, 30.0}, {3, 2, 15.0}, {5, 4, 20.0}, {4, 1, 20.0}, {7, 6, 10.0}, {9, 8, 20.0}, {9, 7, 15.0}, {7, 1, 20.0}]



1-node management
2-edge management
3-Show the whole graph
4-exit

Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
Enter the id of the node, whose degree you want to know
3



Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
enter the id of the node you want to delete, the node has to be contained in the graph
node deleted


Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
1-node management
2-edge management
3-Show the whole graph
4-exit
Order: 8
Number of edges: 5

Nodes:
    [2, 3, 4, 5, 6, 7, 8, 9]

Edges:
    [{3, 2, 15.0}, {5, 4, 20.0}, {7, 6, 10.0}, {9, 8, 20.0}, {9, 7, 15.0}]



1-node management
2-edge management
3-Show the whole graph
4-exit

Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
enter the id of the nodes you want to add, it is assumed they're not currently part of the graph
when you're done, enter 0 and hit enter
node added successfully



Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
1-node management
2-edge management
3-Show the whole graph
4-exit

Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
create the edges, enter id's of the nodes adjacent (they have to be in the graph), and the weight of the edges
when you're done, hit 0
edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!

edge added successfully!



Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
The total number of edges is 13


Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
create the edges, enter id's of the nodes adjacent (they have to be in the graph), and the weight of the edges
when you're done, hit 0
edge added successfully!



Edge operations:
1-Add Edge
2-Remove an edge between two nodes
3-Remove all edges from a node
4-invalidate all edges
5-Get the total number of edges
6-Get the number of valid edges of the graph
7-Show all edges
8-Show all valid edges
9-Verify if there is an edge between two nodes
10-Verify if there is a valid one
11-Get the edge between two nodes
12-Get the edges adjacent to a node
13-Get the valid edges adjacent to a node
Any other number-exit form edge management
1-node management
2-edge management
3-Show the whole graph
4-exit

Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
Enter the id of the node, whose degree you want to know
9



Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
These are the id's of all nodes of the graph
2
3
4
5
6
7
8
9
1


Node operations:
1-Add a Node
2-erase a node (it has to be in the graph previously)
3-Get the order of the graph (number of nodes)
4-Verify if a node is contained in the graph
5-Get the degree of a node
6-Get degree of a node, only counting valid edges
7-get all the nodes from the graph
any other key-exit form node management
1-node management
2-edge management
3-Show the whole graph
4-exit
Order: 9
Number of edges: 14

Nodes:
    [2, 3, 4, 5, 6, 7, 8, 9, 1]

Edges:
    [{3, 2, 15.0}, {5, 4, 20.0}, {7, 6, 10.0}, {9, 8, 20.0}, {9, 7, 15.0}, {2, 1, 20.0}, {3, 1, 20.0}, {4, 1, 20.0}, {5, 1, 20.0}, {6, 1, 20.0}, {7, 1, 20.0}, {8, 1, 20.0}, {9, 1, 20.0}, {1, 1, 50.0}]



1-node management
2-edge management
3-Show the whole graph
4-exit
