List of all the stuff to do for the third delivery (by class):

All the text written like <this> has to be replaced by the corresponding json string (string with " around it)
All the text following //is for commenting and is to be ignored
... indicate that more data needs to go there


Exception convention example:
{
	"Exception": {
		"Name": "IOException",
		"Message": "File not exists"
	}
}

TODO: ALSO, A BIT OF THE DOMAIN CONTROLLER STRUCTURE NEED TO BE CHANGED, INSTEAD OF PRIMARY AND SECONDARY THERE
TODO: WILL NOW BE A CURRENTPARTITION AND A PARTITION1 AND PARTITION2, WE NEED TO CHANGE THE NAMES AND ADD THE
TODO: CORRESPONDING FUNCTIONS


TODO: WE CAN NEVER RETURN A NULL VALUE, IF THERE IS NO ELEMENT WE RETURN AN EMPTY JSONOBJECT (AS AN STRING IT IS {}
TODO: OR WE HAVE TO FIND A WAY TO CORRECT THIS

DomainController:
======================================
GETTERS:
=======================================

----------------------------------------
ASSIGNED:
DONE:

existsAttrDef(jAttr)
arguments: jMP is a JSON object with the following structure, the function returns a bool
{
	"AttrDefName":<nomAttributeDefinition>
}
----------------------------------------
ASSIGNED:
DONE:

existsMP(jMP)
arguments: jMP is a JSON object with the following structure, the function returns a bool
{
	"State":<codiEstat>,
	"District":<numerodistricte>,
}

----------------------------------------
ASSIGNED: Àlex Miró
DONE: 20.05.15
-getShortMPList()
returns: a JSON string with the following format:
	{
		"MPList:"
		{
			"State":<statecode>
			,"District":<districNum>
		}
		,
		...  //for all the MPs
	}

----------------------------------------
ASSIGNED: aleixsacrest
DONE:
-getMPList()
returns: a JSON string with the following format:
	{
		"MPList" : [ //One of these for each MP
			  {"State":<statecode>
			,"District":<districNum>
			,"Name":<name>
			,<AttrDef1>:<Attr1Value>
			...	//for all the attributes that the mp has
			}]
	}


----------------------------------------
ASSIGNED: Àlex Miró
DONE: 20.05.15
-getMPInfo(state,district)
returns: a JSON string with the following format:
	{
		{	//For the MP with State state and District district
			"State":<statecode>
			,"District":<districNum>
			,"Name":<name>
			,"Attributes":<AttrDef1>:<Attr1Value>
			...	//for all the attributes that the mp has
		}
	}


----------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.14
-getMainCommunityNumber()
returns: a number with the number of communities currently calculated
----------------------------------------
ASSIGNED: aleixsacrest
DONE:
-getMPsMainCommunities(comnumber)
returns:
	{
		{
			"State":<statecode>
			,"District":<districNum>
		}
		,
		...  //for all the MPs in the community
	}

----------------------------------------
ASSIGNED: aleixsacrest
DONE:
-getSecCommunityNumber()
returns: a number with the number of communities currently calculated
----------------------------------------
ASSIGNED: aleixsacrest
DONE:
-getMPsSecCommunities(comnumber)
returns:
	{
		{
			"State":<statecode>
			,"District":<districNum>
		}
		,
		...  //for all the MPs in the community
	}
----------------------------------------
ASSIGNED:
DONE:
compareCommunities()
return:
	the value of the comparison, may become more complex
	//we should discuss how the comparisons work before
----------------------------------------
ASSIGNED: aleixsacrest
DONE:
getAttrDefs()
return:
	{
		"Attribute Definitions" : [
			{"AttrDefName":<AttrDefName>,
			"AttrDefImportance":<AttrDefImportance>
		  ,
          ...	//For all the attribute definitions
		}]
	}

----------------------------------------
ASSIGNED: Ondrej V
DONE:
getSavedCongressNames()
return:
	{
		{
			"CongressName":<congressName>,
		}
		,
		...//For all the saved graph's names
	}
----------------------------------------
ASSIGNED: Ondrej V
DONE:
getSavedCongressCommunitiesNames(congressName)
return:
	{
		{
			"PartitionName":<partitionName>,
		}
		,
		...//For all the saved partitions of the argument congress names
	}
======================================
MODIFIERS:
=======================================
----------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.15

addMP(jMP)
arguments: jMP is a JSON object with the following structure
The MP cannnot exist
{
	{
		"State":<codiEstat>,
		"District":<numerodistricte>,
		"Name":<name>
	}
}
----------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.15

deleteMP(jMP)
arguments: jMP is a JSON object with the following structure:
The mp from the state and district is deleted
{
	"State":<statecode>
	,"District":<districNum>
}


----------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.15

addOrModifyAttribute(jAttr):
arguments: jAttr is a JSON object the following structure:
If the MP already has that attribute it is modified instead of added
{
	//The MP we want to add the attrDef to
	"State":<codiEstat>,
	"District":<numerodistricte>,
	//The attrDef and value
	"AttrDef":<AttrDefName>,
	"AttrValue":<AttrValue>
	}
}

----------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.15

deleteAttribute(jAttr):
arguments: jAttr is a JSON object the following structure:
{
	//The MP we want to delete the attrDef to
	"State":<codiEstat>,
	"District":<numerodistricte>,
	//The attrDef we want to delete
	"AttrDef":<AttrDefName>,

}
-----------------------------------------
ASSIGNED: Àlex Miró
DONE: 23.05.15
addOrModifyAttrDef(jAttrDef)
arguments: jAttrDef is a JSON object with the following structure:
{
	"AttrDefName":<attrdef>,
	"Importance":<importance>
}

---------------------------------------
ASSIGNED: Àlex Miró
DONE: 21.05.15
deleteAttrDef(jAttrDef)
arguments: jAttrDef is a JSON object with the following structure:

{
	"AttrDefName":<attrdef>
}
---------------------------------------
ASSIGNED:
DONE:
















